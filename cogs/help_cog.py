# cogs/help_cog.py
from __future__ import annotations
import discord
from discord.ext import commands
from discord import app_commands

PUBLIC_COMMANDS = {
    "/info": "üìá Affiche ton profil GotValis (PV, PB, tickets, or, perso √©quip√©, classement).",
    "/inv": "üéí Ouvre ton inventaire (objets, quantit√©s, tickets, GoldValis).",
    "/tickets": "üéüÔ∏è Montre ton solde de tickets.",
    "/daily": "üóìÔ∏è R√©cup√®re ton paquet quotidien (ticket + items + or).",
    "/tirage": "üé∞ Utilise un ticket pour invoquer un personnage.",
    "/use": "üß∞ Utilise un objet utilitaire.",
    "/heal": "üíâ Soigne une cible avec un objet de soin.",
    "/fight": "‚öîÔ∏è Attaque une cible avec un objet offensif.",
    "/status": "üîé Liste tes effets actifs (poison, virus, infection, etc.).",
    "/help": "üìö Ce manuel crypt√© GotValis.",
}

COMMANDS_LIST = list(PUBLIC_COMMANDS.keys())

async def help_autocomplete(interaction: discord.Interaction, current: str):
    current_lower = (current or "").lower()
    choices = []
    for name in COMMANDS_LIST:
        if current_lower in name or current_lower in PUBLIC_COMMANDS[name].lower():
            choices.append(app_commands.Choice(name=name, value=name))
        if len(choices) >= 25:
            break
    return choices

class HelpCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="help", description="Manuel crypt√© GotValis : trouvez la commande qu‚Äôil vous faut.")
    @app_commands.describe(command="Commande √† expliquer (auto-compl√©tion).")
    @app_commands.autocomplete(command=help_autocomplete)
    async def help_cmd(self, inter: discord.Interaction, command: str | None = None):
        if command is None or command not in PUBLIC_COMMANDS:
            # Vue d‚Äôensemble
            embed = discord.Embed(
                title="üìö Manuel crypt√© ‚Äî R√©seau GotValis",
                description="Liste des interfaces civiles autoris√©es.",
                color=discord.Color.blurple(),
            )
            for name, desc in PUBLIC_COMMANDS.items():
                embed.add_field(name=name, value=desc, inline=False)
            embed.set_footer(text="Modules administratifs non list√©s.")
            await inter.response.send_message(embed=embed, ephemeral=True)
            return

        # Fiche d√©taill√©e
        embed = discord.Embed(
            title=f"‚ÑπÔ∏è Aide : {command}",
            description=PUBLIC_COMMANDS[command],
            color=discord.Color.blurple(),
        )
        embed.add_field(
            name="Contexte RP",
            value=(
                "Vous consultez un terminal **GotValis**. Les interfaces expos√©es sont filtr√©es.\n"
                "Les actions de combat et d‚Äô√©conomie sont surveill√©es, chaque requ√™te est trac√©e."
            ),
            inline=False,
        )
        await inter.response.send_message(embed=embed, ephemeral=True)

async def setup(bot: commands.Bot):
    await bot.add_cog(HelpCog(bot))
