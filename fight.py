# fight.py
import asyncio
import discord
from discord import app_commands

from utils import OBJETS
from storage import get_user_data
from data import sauvegarder
from combat import apply_item_with_cooldown, apply_attack_chain

# ‚è≥ Filet de s√©curit√© : √©vite les "r√©fl√©chit..." infinis c√¥t√© Discord
TIMEOUT_INTERNE = 8


def register_fight_command(bot: discord.Client):
    """
    Enregistre la commande /fight :
      /fight target:<membre> item:<emoji>
    Permet d'attaquer un joueur avec un objet de type attaque/virus/poison/infection.
    """

    @bot.tree.command(
        name="fight",
        description="Attaque un autre membre avec un objet sp√©cifique",
    )
    @app_commands.describe(
        target="La personne √† attaquer",
        item="Objet d‚Äôattaque √† utiliser (emoji pr√©sent dans ton inventaire)",
    )
    async def fight_slash(
        interaction: discord.Interaction,
        target: discord.Member,
        item: str,
    ):
        # On d√©f√®re imm√©diatement pour √©viter le timeout Discord
        await interaction.response.defer(thinking=True)

        try:
            guild_id = str(interaction.guild.id)
            uid = str(interaction.user.id)
            tid = str(target.id)

            # üö´ Garde-fous
            if target.bot:
                await interaction.followup.send(
                    "ü§ñ Tu ne peux pas attaquer un bot, m√™me s‚Äôil a l‚Äôair louche.",
                    ephemeral=True,
                )
                return

            if interaction.user.id == target.id:
                await interaction.followup.send(
                    "‚ùå Tu ne peux pas t‚Äôattaquer toi-m√™me.",
                    ephemeral=True,
                )
                return

            # üéØ Validation de l‚Äôobjet
            action = OBJETS.get(item)
            if not isinstance(action, dict):
                await interaction.followup.send(
                    "‚ùå Objet inconnu ou non autoris√©.",
                    ephemeral=True,
                )
                return

            # üì¶ V√©rifie l'inventaire de l'attaquant
            user_inv, _, _ = get_user_data(guild_id, uid)
            if item not in user_inv:
                await interaction.followup.send(
                    "‚ùå Tu n‚Äôas pas cet objet dans ton inventaire.",
                    ephemeral=True,
                )
                return

            # üîé V√©rifie le type d'objet (armes valides)
            types_valides = {"attaque", "attaque_chaine", "virus", "poison", "infection"}
            if action.get("type") not in types_valides:
                await interaction.followup.send(
                    "‚ö†Ô∏è Cet objet n‚Äôest pas une arme valide !",
                    ephemeral=True,
                )
                return

            # ‚ò†Ô∏è Cas particulier : Attaque en cha√Æne
            if action.get("type") == "attaque_chaine" or item == "‚ò†Ô∏è":
                try:
                    # La fonction envoie elle-m√™me les messages
                    await asyncio.wait_for(
                        apply_attack_chain(interaction, uid, tid, item, action),
                        timeout=TIMEOUT_INTERNE,
                    )
                except asyncio.TimeoutError:
                    await interaction.followup.send(
                        "‚è≥ L‚Äôattaque en cha√Æne a pris trop de temps. R√©essaie dans un instant.",
                        ephemeral=True,
                    )
                    return
                except Exception as e:
                    await interaction.followup.send(
                        f"‚ùå Erreur pendant l‚Äôattaque en cha√Æne : {e}",
                        ephemeral=True,
                    )
                    return

                # ‚úÖ On consomme l'objet si le moteur ne demande pas de le conserver
                if not action.get("no_consume", False):
                    try:
                        user_inv.remove(item)
                        sauvegarder()
                    except Exception:
                        pass
                return

            # üîπ Attaques ¬´ normales ¬ª (attaque / virus / poison / infection)
            try:
                # Le moteur enverra lui-m√™me l‚Äôembed; on r√©cup√®re juste le flag de succ√®s
                _, success = await asyncio.wait_for(
                    apply_item_with_cooldown(interaction, uid, tid, item, action),
                    timeout=TIMEOUT_INTERNE,
                )
            except asyncio.TimeoutError:
                await interaction.followup.send(
                    "‚è≥ L‚Äôattaque a mis trop de temps √† se r√©soudre. R√©essaie.",
                    ephemeral=True,
                )
                return
            except Exception as e:
                await interaction.followup.send(
                    f"‚ùå Erreur pendant l‚Äôattaque : {e}",
                    ephemeral=True,
                )
                return

            # ‚úÖ Consommer l'objet si l‚Äôattaque a √©t√© valid√©e ET pas de ‚Äúpas_de_conso‚Äù
            if success and not action.get("no_consume", False):
                try:
                    user_inv.remove(item)
                    sauvegarder()
                except Exception:
                    pass

        except Exception as e:
            # üßØ Dernier filet : on tente d'informer l'utilisateur quoi qu'il arrive
            try:
                await interaction.followup.send(
                    f"‚ùå Erreur inattendue : {e}",
                    ephemeral=True,
                )
            except Exception:
                if not interaction.response.is_done():
                    await interaction.response.send_message(
                        f"‚ùå Erreur inattendue : {e}",
                        ephemeral=True,
                    )

    # ‚úÖ Autocompl√©tion : propose uniquement les armes pr√©sentes dans l‚Äôinventaire
    @fight_slash.autocomplete("item")
    async def autocomplete_items(interaction: discord.Interaction, current: str):
        guild_id = str(interaction.guild.id)
        uid = str(interaction.user.id)
        user_inv, _, _ = get_user_data(guild_id, uid)

        types_valides = {"attaque", "attaque_chaine", "virus", "poison", "infection"}
        # On filtre : uniquement des strings/emoji et des types d'attaque
        attack_items = sorted({
            i for i in user_inv
            if isinstance(i, str) and OBJETS.get(i, {}).get("type") in types_valides
        })

        if not attack_items:
            return [app_commands.Choice(name="Aucune arme disponible", value="")]

        suggestions = []
        cur = (current or "").strip()
        for emoji in attack_items:
            if cur and cur not in emoji:
                continue

            obj = OBJETS.get(emoji, {})
            typ = obj.get("type")

            if typ == "attaque":
                label = f"{emoji} | {obj.get('degats', '?')} dmg, {int(obj.get('crit', 0)*100)}% crit"
            elif typ == "attaque_chaine":
                label = f"{emoji} | ‚ò†Ô∏è 24 dmg + 2√ó12, {int(obj.get('crit', 0)*100)}% crit"
            elif typ == "virus":
                label = f"{emoji} | Virus ‚Üí 5 dmg initiaux + 5 dmg/h"
            elif typ == "poison":
                label = f"{emoji} | Poison ‚Üí 3 dmg initiaux + 3 dmg/30min"
            elif typ == "infection":
                label = f"{emoji} | Infection ‚Üí 5 dmg initiaux + 2 dmg/30min, propagation"
            else:
                label = f"{emoji} (Objet sp√©cial)"

            suggestions.append(app_commands.Choice(name=label, value=emoji))

        return suggestions[:25]
